<?php

module_load_include('inc', 'os2forms_sbsys', 'includes/os2forms_sbsys.utils');
module_load_include('inc', 'os2forms_sbsys', 'includes/os2forms_sbsys.xml_generation');

/**
 * Implements hook_mail_alter().
 */
function os2forms_sbsys_mail_alter(&$message) {
  if (($message['id'] == 'webform_submission') && isset($message['params']['node']) && isset($message['params']['submission'])) {
    $node = $message['params']['node'];
    $submission = $message['params']['submission'];

    $attachments = array();

    // SBSYS Config.
    $sbsys_config = os2forms_frontend_webform_get_setting($node->nid, 'os2forms_sbsys');
    if (isset($sbsys_config['enabled']) && $sbsys_config['enabled']) {
      // Generating submission id.
      $no_send_sbsys_mail = isset($sbsys_config['no_send_sbsys_email_addr']) ? $sbsys_config['no_send_sbsys_email_addr'] : FALSE;
      $send_email = TRUE;
      if (is_array($no_send_sbsys_mail)) {
        $no_send_sbsys_mail = array_diff($no_send_sbsys_mail, array(0));
        if ( !empty($no_send_sbsys_mail) ) {
          foreach ($no_send_sbsys_mail as $eid) {
            $email_addresses = $node->webform['emails'][$eid]['email'];
            if ( isset($node->webform['components'][$email_addresses]) ) {
              $email_addresses = array_pop($submission->data[$email_addresses]);
            }
            else {
              $email_addresses = array_filter(explode(',', check_plain($node->webform['emails'][$eid]['email'])));
            }
            if (is_array($email_addresses) && in_array($message['to'], $email_addresses) || trim($message['to']) == trim($email_addresses)) {
              $send_email = FALSE;
              break;
            }
          }
        }
      }

      if ($send_email) {
        // Creating attachment.
        $filename = 'os2forms.xml';
        $attachment = new stdClass;
        $attachment->filecontent = os2forms_sbsys_generate_xml($message['params']);
        $attachment->filename = $filename;
        $attachment->filemime = 'text/xml';

        $attachments[] = $attachment;
      }

      // Scheduling submission to be cleared.
      if ($sbsys_config['mark_synched']) {
        // We mark submission as synched right away, otherwise it will not be
        // cleared.
        os2forms_frontend_mark_submission_synched($submission->uuid);
      }
    }

    if (!empty($attachments)) {
      $html_capable = variable_get('webform_email_html_capable', FALSE);

      if ($html_capable) {
        if (module_exists('mimemail')) {
          foreach($attachments as $attachment) {
            $message['params']['attachments'][] = $attachment;
          }
        }
      }
      else {
        foreach($attachments as $attachment) {
          //find existing trenner
          preg_match('/\multipart\/mixed;\ boundary=\"(.*)\"/', $message['headers']['Content-Type'], $matches);
          $trenner = $matches[1];

          //remove message end
          $message['body'][0] = str_replace("--$trenner--", '', $message['body'][0]);

          //and new content
          $message['body'][0] .= "\n\n--" . $trenner . "\n";
          $message['body'][0] .= "Content-Type: " . $attachment->filemime . "; name=\"" . $attachment->filename . "\"\n";
          $message['body'][0] .= "Content-Transfer-Encoding: base64\n";
          $message['body'][0] .= "Content-Disposition: attachment; filename=\"" . $attachment->filename . "\"\n\n";
          $message['body'][0] .= chunk_split(base64_encode($attachment->filecontent));
          $message['body'][0] .= "\n\n";
          $message['body'][0] .= "--" . $trenner . "--";
        }
      }
    }
  }
}

///**
// * Implements hook_module_implements_alter().
// *
// * Make sure that our mail_alter is called AFTER the same hook provided in webform2pdf.
// */
//function os2forms_sbsys_module_implements_alter(&$implementations, $hook) {
//  if ($hook == 'mail_alter') {
//    $group = $implementations['os2forms_sbsys'];
//    unset($implementations['os2forms_sbsys']);
//    $implementations['os2forms_sbsys'] = $group;
//  }
//}