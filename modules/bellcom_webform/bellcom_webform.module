<?php
module_load_include('inc', 'bellcom_webform', 'includes/bellcom_webform.xml_generation');
module_load_include('inc', 'bellcom_webform', 'includes/bellcom_webform.generate_doc');

/**
 * Implements hook_menu().
 */
function bellcom_webform_menu() {
  $items = array();

  $items['node/%webform_menu/webform/sbsys_xml'] = array(
    'title' => 'SBSYS XML',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bellcom_webform_sbsys_settings_form', 1),
    'access arguments' => array('edit webform components'),
    'weight' => 4,
    'type' => MENU_LOCAL_TASK,
  );

  $items['node/%webform_menu/webform/generate_doc'] = array(
    'title' => 'Generate DOC',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bellcom_webform_generate_doc_settings_form', 1),
    'access arguments' => array('edit webform components'),
    'weight' => 4,
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/*
* bellcom_webform_mail_alter: hook_mail_alter
*/
function bellcom_webform_mail_alter(&$message) {
  if (($message['id'] == 'webform_submission') && isset($message['params']['node']) && isset($message['params']['submission'])) {
    $node = $message['params']['node'];
    $submission = $message['params']['submission'];

    $attachments = array();

    // SBSYS Config.
    $sbsys_config = bellcom_webform_sbsys_get_setting($node->nid);
    if (isset($sbsys_config['enabled']) && $sbsys_config['enabled']) {
      // Generating submission id.
      $no_send_sbsys_mail = isset($config['no_send_sbsys_email_addr']) ? $config['no_send_sbsys_email_addr'] : FALSE;
      $send_email = TRUE;
      if (is_array($no_send_sbsys_mail)) {
        $no_send_sbsys_mail = array_diff($no_send_sbsys_mail, array(0));
        if ( !empty($no_send_sbsys_mail) ) {
          foreach ($no_send_sbsys_mail as $eid) {
            $email_addresses = $node->webform['emails'][$eid]['email'];
            if ( isset($node->webform['components'][$email_addresses]) ) {
              $email_addresses = array_pop($submission->data[$email_addresses]);
            }
            else {
              $email_addresses = array_filter(explode(',', check_plain($node->webform['emails'][$eid]['email'])));
            }
            if (is_array($email_addresses) && in_array($message['to'], $email_addresses) || trim($message['to']) == trim($email_addresses)) {
              $send_email = FALSE;
              break;
            }
          }
        }
      }

      if ($send_email) {
        // Creating attachment.
        $filename = 'os2forms.xml';
        $attachment = new stdClass;
        $attachment->filecontent = bellcom_webform_module_sbsys_xml($message['params']);
        $attachment->filename = $filename;
        $attachment->filemime = 'text/xml';

        $attachments[] = $attachment;
      }

      // Scheduling submission to be cleared.
      if ($sbsys_config['anonymize_submission']) {
        // We mark submission as synched right away, otherwise it will not be
        // cleared.
        os2forms_frontend_mark_submission_synched($submission->uuid);
      }
    }

    // Generate DOC config.
    $generate_doc_config = bellcom_webform_generate_doc_get_setting($node->nid);
    if (isset($generate_doc_config) && $generate_doc_config['enabled']) {
      // Creating a file in a temporary dir.
      $file_uri = bellcom_webform_generate_doc_create_file($node, $submission);
      $file_size = filesize($file_uri);
      $handle = fopen($file_uri, "rb");
      $content = fread($handle, $file_size);
      fclose($handle);

      $attachment = new stdClass;
      $attachment->filecontent = $content;
      $attachment->filename = basename($file_uri);
      $attachment->filemime = mime_content_type($file_uri);

      $attachments[] = $attachment;

      // Deleting the file in the end.
      file_unmanaged_delete($file_uri);
    }

    if (!empty($attachments)) {
      $html_capable = variable_get('webform_email_html_capable', FALSE);

      if ($html_capable) {
        if (module_exists('mimemail')) {
          foreach($attachments as $attachment) {
            $message['params']['attachments'][] = $attachment;
          }
        }
      }
      else {
        foreach($attachments as $attachment) {
          //find existing trenner
          preg_match('/\multipart\/mixed;\ boundary=\"(.*)\"/', $message['headers']['Content-Type'], $matches);
          $trenner = $matches[1];

          //remove message end
          $message['body'][0] = str_replace("--$trenner--", '', $message['body'][0]);

          //and new content
          $message['body'][0] .= "\n\n--" . $trenner . "\n";
          $message['body'][0] .= "Content-Type: " . $attachment->filemime . "; name=\"" . $attachment->filename . "\"\n";
          $message['body'][0] .= "Content-Transfer-Encoding: base64\n";
          $message['body'][0] .= "Content-Disposition: attachment; filename=\"" . $attachment->filename . "\"\n\n";
          $message['body'][0] .= chunk_split(base64_encode($attachment->filecontent));
          $message['body'][0] .= "\n\n";
          $message['body'][0] .= "--" . $trenner . "--";
        }
      }
    }
  }
}

/**
 * Implements hook_module_implements_alter().
 *
 * Make sure that our mail_alter is called AFTER the same hook provided in webform2pdf.
 */
function bellcom_webform_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'mail_alter') {
    $group = $implementations['bellcom_webform'];
    unset($implementations['bellcom_webform']);
    $implementations['bellcom_webform'] = $group;
  }
}

function bellcom_webform_hide_submit_alter(&$hide_submit_settings) {
  $current_path = current_path();

  //$hide_submit_settings['hide_submit']['hide_submit_status'] = FALSE;
  if (strpos($current_path, 'node/') !== 0) {
    $hide_submit_settings['hide_submit']['hide_submit_status'] = FALSE;
  }
}
